# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
alias decompress="tar -xzf"

# change the current working directory when exiting Yazi
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    IFS= read -r -d '' cwd <"$tmp"
    [ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
    rm -f -- "$tmp"
}


# Starts fastfetch with a pokemon with the same name as the zellij session
function pokefetch() {
    # check if fastfetch is installed
    if ! command -v fastfetch &>/dev/null; then
        return
    fi

    # check if zellij is installed
    if command -v zellij &>/dev/null; then
        # Get the zellij session name and update the exported variable.
        # The variable must be set again like this in case we change the zellij
        # session to another pokemon name.
        export ZELLIJ_POKEMON_NAME=$(zellij list-sessions | \grep '(current)' | sed -r "s/\x1b\[[0-9;]*m//g" | awk '{print $1}')

        # Check if the variable is set (i.e., we're inside a zellij session)
        if [ -n "$ZELLIJ_POKEMON_NAME" ]; then
            pokemon-colorscripts \
                --no-title -n "$ZELLIJ_POKEMON_NAME" |
                fastfetch \
                    --logo-type file-raw \
                    --logo-height 10 \
                    --logo-width 5 \
                    --logo -
            return
        fi
    fi

    # If zellij is not installed or we're not in a session, show a random pokemon
    pokemon-colorscripts --no-title -r |
        fastfetch \
            --logo-type file-raw \
            --logo-height 10 \
            --logo-width 5 \
            --logo -
}


# Starts a zellij session with a random pokemon name
function pokezellij() {
    # Pick a random Pokémon name from the list provided by pokemon-colorscripts.
    POKEMON_NAME=$(pokemon-colorscripts -l | shuf -n 1)
    # Export the name as an environment variable.
    export ZELLIJ_POKEMON_NAME="$POKEMON_NAME"
    # Use 'exec' to start Zellij with the session named after the Pokémon.
    zellij --session "$POKEMON_NAME"
}


precmd() {
    echo -n -e "\033]0;$(pwd)\007"
}

# Convert webm files generated by the Gnome screenshot video recorder to mp4s that are more compatible
webm2mp4() {
    input_file="$1"
    output_file="${input_file%.webm}.mp4"
    ffmpeg -i "$input_file" -c:v libx264 -preset slow -crf 22 -c:a aac -b:a 192k "$output_file"
}

# Write iso file to sd card
iso2sd() {
    if [ $# -ne 2 ]; then
        echo "Usage: iso2sd <input_file> <output_device>"
        echo "Example: iso2sd ~/Downloads/ubuntu-25.04-desktop-amd64.iso /dev/sda"
        echo -e "\nAvailable SD cards:"
        lsblk -d -o NAME | grep -E '^sd[a-z]' | awk '{print "/dev/"$1}'
    else
        sudo dd bs=4M status=progress oflag=sync if="$1" of="$2"
        sudo eject $2
    fi
}

# Create a desktop launcher for a web app
web2app() {
    if [ "$#" -ne 3 ]; then
        echo "Usage: web2app <AppName> <AppURL> <IconURL> (IconURL must be in PNG -- use https://dashboardicons.com)"
        return 1
    fi

    local APP_NAME="$1"
    local APP_URL="$2"
    local ICON_URL="$3"
    local ICON_DIR="$HOME/.local/share/applications/icons"
    local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
    local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

    mkdir -p "$ICON_DIR"

    if ! curl -sL -o "$ICON_PATH" "$ICON_URL"; then
        echo "Error: Failed to download icon."
        return 1
    fi

    cat >"$DESKTOP_FILE" <<EOF
[Desktop Entry]
Version=1.0
Name=$APP_NAME
Comment=$APP_NAME
Exec=google-chrome --app="$APP_URL" --name="$APP_NAME" --class="$APP_NAME" --window-size=800,600
Terminal=false
Type=Application
Icon=$ICON_PATH
Categories=GTK;
MimeType=text/html;text/xml;application/xhtml_xml;
StartupNotify=true
EOF

    chmod +x "$DESKTOP_FILE"
}

web2app-remove() {
    if [ "$#" -ne 1 ]; then
        echo "Usage: web2app-remove <AppName>"
        return 1
    fi

    local APP_NAME="$1"
    local ICON_DIR="$HOME/.local/share/applications/icons"
    local DESKTOP_FILE="$HOME/.local/share/applications/${APP_NAME}.desktop"
    local ICON_PATH="${ICON_DIR}/${APP_NAME}.png"

    rm "$DESKTOP_FILE"
    rm "$ICON_PATH"
}

# Move a reference to a .desktop file, like Spotify.desktop, to a named folder, like Xtra.
# Don't use full path for the .desktop file.
app2folder() {
    if [ "$#" -ne 2 ]; then
        local FOLDERS=$(gsettings get org.gnome.desktop.app-folders folder-children | tr -d "[],'")
        echo "Usage: app2folder <desktop_file.desktop> <folder_name>"
        echo "Folders: $FOLDERS"
        return 1
    fi

    local DESKTOP_FILE="$1"
    local FOLDER="$2"
    local SCHEMA="org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/$FOLDER/"
    local CURRENT_APPS=$(gsettings get "$SCHEMA" apps)

    if [[ "$CURRENT_APPS" != *"$DESKTOP_FILE"* ]]; then
        local TRIMMED=$(echo "$CURRENT_APPS" | sed "s/^\[//;s/\]$//")
        gsettings set "$SCHEMA" apps "[$TRIMMED, '$DESKTOP_FILE']"
    fi
}

# Remove desktop app from folder
app2folder-remove() {
    if [ "$#" -ne 2 ]; then
        local FOLDERS=$(gsettings get org.gnome.desktop.app-folders folder-children | tr -d "[],'")
        echo "Usage: app2folder-remove <desktop_file.desktop> <folder_name>"
        echo "Folders: $FOLDERS"
        return 1
    fi

    local DESKTOP_FILE="$1"
    local FOLDER="$2"
    local SCHEMA="org.gnome.desktop.app-folders.folder:/org/gnome/desktop/app-folders/folders/$FOLDER/"
    local CURRENT_APPS=$(gsettings get "$SCHEMA" apps)

    if [[ "$CURRENT_APPS" == *"$DESKTOP_FILE"* ]]; then
        local RAW_LIST=$(echo "$CURRENT_APPS" | tr -d "[]'")
        IFS=',' read -ra APPS_ARRAY <<<"$RAW_LIST"

        # Filter out the app to be removed
        local NEW_APPS=()
        for app in "${APPS_ARRAY[@]}"; do
            app=$(echo "$app" | xargs) # trim spaces
            if [[ "$app" != "$DESKTOP_FILE" && -n "$app" ]]; then
                NEW_APPS+=("'$app'")
            fi
        done

        # Join list again
        local NEW_LIST=$(
            IFS=,
            echo "${NEW_APPS[*]}"
        )

        gsettings set "$SCHEMA" apps "[$NEW_LIST]"
    fi
}

# Ensure that external keyboards that use an fn key has the F keys as the default
alias fix_fkeys='echo 2 | sudo tee /sys/module/hid_apple/parameters/fnmode'

# Spotify window is too large on many displays, so fix this by zooming it down
alias fix_spotify_window_size="sudo sed -i 's|^Exec=.*|Exec=spotify --force-device-scale-factor=1.5 %U|' /usr/local/share/applications/spotify.desktop"
